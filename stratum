#!/usr/bin/env bash
# StratumOS - remote controlled linux system
# install as root: stratum --init
# use as user: stratum [--help|-h|-?]

script=${0##*/}
args=${@}
script_path=`pwd`
repo_url=http://stratumos.com # main repository server
git_url=https://github.com/StratumOS/StratumOS # main git server
conf_file=.stratum.conf # config file
func_file=.stratum.func # bash functions file
stratum_dir=/stratum
source $stratum_dir/$conf_file
source $stratum_dir/$func_file

logline() {
    while IFS= read -r line; do
        echo -e "$(date +%F' '%T) $script - $line"; echo "$(date +%F' '%T) $script - $line" >> $log_file
    done
}

# create log_file
log_file=/var/log/stratum.log
touch $log_file 2>/dev/null; chmod 666 $log_file 2>/dev/null | logline
# create backup dir
backup_dir=/var/backups/stratum
mkdir $backup_dir 2>/dev/null

init () {
rm $stratum_dir/$conf_file; rm $stratum_dir/$func_file; echo "remove config & functions files and download from ..."
while ! [[ -s $HOME/$conf_file && -s $HOME/$func_file && -d $HOME/.stratum && -d /stratum && -s /stratum/stratum ]]; do
  mkdir $HOME/.stratum 2>/dev/null # user's stratum directory
  mkdir $stratum_dir 2>/dev/null # main stratum directory
  cp ./stratum $stratum_dir/stratum 2>/dev/null # copy from current path to main dir
# remove file only if it is not in $stratum_dir and it is not a symbolic link
  if ! [[ $script_path == "/stratum" ]] && [[ -L ./stratum ]] && [[ -d ./stratum ]]; then
    rm ./stratum
    echo -e "\e[101m\e[30m ! \e[0m\e[31m remove 'stratum' from current path\e[0m"
#  else
#    echo -e "\e[104m\e[30m - \e[0m\e[34m i'm not in /stratum path &\
#    ./stratum is not a directory or symlink ... OK \e[0m"
  fi
  ln -s $stratum_dir/stratum $HOME/stratum 2>/dev/null # symlink link
  ln -s $stratum_dir/.stratum.conf $HOME/$conf_file 2>/dev/null # symlink link
  ln -s $stratum_dir/.stratum.func $HOME/$func_file 2>/dev/null # symlink link
  ln -s $stratum_dir/stratum /usr/bin/stratum 2>/dev/null # symlink link
  if ! wget -nv -O /stratum/$conf_file --no-check-certificate $repo_url/$conf_file; then
    echo -e "\e[101m\e[30m ERROR: there is no file \e[0m\e[34m"$conf_file"\e[0m on the server" $repo_url\
    " or no response! exit ...\e[0m"
    exit 1
  else
    echo -e "\e[100m\e[97m I \e[0m\e[97m OK: download file "$conf_file" from \e[0m"$repo_url
  fi
  if ! wget -nv -O /stratum/$func_file --no-check-certificate $repo_url/$func_file; then
    echo -e "\e[101m\e[30m ERROR: there is no file \e[0m\e[34m"$func_file"\e[0m on the server" $repo_url\
    " or no response! exit ...\e[0m"
    exit 1
  else
    echo -e "\e[100m\e[97m I \e[0m\e[97m OK: download file "$func_file" from \e[0m"$repo_url
  fi
done
}

update () {
  if [ -z "$update_file" ]
  then
    update_file=stratum
    echo -e '\e[31m CAUTION! update itself ...  \e[0m\e[0m'
  else
    update_file=$update_file
  fi
  echo -e "\e[44m start update file:\e[0m\e[33m $update_file\e[0m" | logline
  if ! wget -nv -O /stratum/$update_file.new --no-check-certificate $repo_url/$update_file; then
    echo -e "\e[41m\e[33m ERROR: there is no file \e[97m$update_file\e[41m\e[33m on the server\e[97m $repo_url\
 \e[0mor no response!\e[0m check again ..." | logline
    rm -rf /stratum/$update_file.new
    exit 1
  else
    rm -rf $backup_dir/$update_file.bak
      echo -e '\e[32m backup copy ...\e[0m'
    cp /stratum/$update_file $backup_dir/$update_file.bak
      echo -e '\e[35m backup file: '$backup_dir'/'$update_file.bak' ...just in case...\e[0m'
      echo -e '\e[32m remove existing oryginal ...\e[0m'
    ln -s $backup_dir/$update_file.bak /stratum/$update_file.bak 2>/dev/null # symlink link
    rm -rf /stratum/$update_file
      echo -e '\e[32m copy new one...\e[0m'
    chmod +x /stratum/$update_file.new
    cp /stratum/$update_file.new /stratum/$update_file 2>/dev/null
      echo -e '\e[32m chmod +x ...\e[0m'
      echo -e $"\e[32m file: $update_file updated...\e[0m" | logline
  fi
}

root_check () {
if [ "$USER" != "root" ];then
		echo -e "\e[31mRun this script as root! exit...\e[0m" | logline; exit
	else
		echo -e "\e[32mStart OK ... as root\e[0m" | logline
fi
}

info_bar () {
echo -e "\e[42m\e[30mOK\e[0m\e[32m script=\e[0m\e[94m"$script \
"\e[0m\e[32m args=\e[0m\e[94m"$args \
"\e[0m\e[32m USER=\e[0m\e[93m"$USER \
"\e[0m\e[32m repo_url=\e[0m"$repo_url "\e[32m log_file=\e[0m"$log_file
echo -e "\e[0m\e[32m script_path=\e[0m\e[94m$script_path \e[0m\e[32m__dir=\e[0m\e[94m$__dir\
\e[0m\e[32m __file=\e[0m\e[94m$__file \e[0m\e[32m__base=\e[0m\e[94m$__base \e[0m\e[32m__root=\e[0m\e[94m$__root\e[0m"
echo -e "\e[32m $(date +%F' '%T) $script - Start script ...\e[0m" 2>/dev/null >> $log_file
}

export_path () {
case "$(echo $PATH)" in
  *"/stratum"*)
  ;;
  *)
  echo -e "\e[33mbefore:\e[0m" $PATH
#  export PATH=$PATH:/stratum
  PATH=$PATH:/stratum; export PATH
  sed -i 's/export PATH=$PATH:\/stratum//g' ~/.profile
  echo 'export PATH=$PATH:/stratum'  >> ~/.profile
  echo 'export PATH=$PATH:/stratum'  >> ~/.bash_profile
  ;;
esac
echo -e "\e[32mPATH is OK now: \e[0m" $PATH
}

check_distro () {
lsb_release -d | logline
uname -a | logline
}

for i in "$@"; do
case $i in
    -u|--update)
  		shift
      root_check
      update
  	;;
    -i|--init)
      shift
      info_bar
      init
    ;;
    -u=*|--update=*)
      update_file="${i#*=}"
      echo -e "\e[44m update specific file: \e[0m update_file=\e[33m$update_file\e[0m"
      shift # past argument=value
      update
    ;;
    -m=*|--mem=*)
      mem="${i#*=}"
#      echo "mem="$mem
      shift # past argument=value
      memcheck
    ;;
    -s|--swapclean)
      mem=usage
      echo -e "\e[31m before: \e[0m"; memcheck
			swap_clean
      echo -e "\e[32m after: \e[0m"; memcheck
		;;
    -c|--clearcache)
      mem=usage
      shift # past argument=value
      echo -e "\e[31m before: \e[0m"; memcheck
      clearcache
      echo -e "\e[32m after: \e[0m"; memcheck
    ;;
    -r=*|--restart=*)
			DSP="${i#*=}"
      echo "DSP="$DSP
      shift # past argument=value
			restart
		;;
    -x=*|--xrestart=*)
			CONSOLE="${i#*=}"
      echo "CONSOLE="$CONSOLE
      shift # past argument=value
			xrestart
		;;
    --logrotate)
    stratum_logrotate
    ;;
    --full|--all|-0)
      info_bar
      export_path
      check_distro
      root_check
      install_stuff_1
      create_busyuser
      rm_files
      apt_files
      install_ssh
      clean_apt
      download_source_from_github
      show_info
    ;;
    -l|--log)
    log
    ;;
    -l=*|--log=*)
    log_date="${i#*=}"
    echo "log_date="$log_date
    shift # past argument=value
    log
    ;;
    -h|-\?|--help)
      echo "option help"
      shift # past argument=value
      info_bar
      help
    ;;
    '')
      echo -e '\e[44m no arguments... exit ...\e[0m \e[32m type: stratum --help [or -h] ...\e[0m'
      exit 1
    ;;
    *)
      echo -e "\e[44m\e[37m I \e[0m\e[94m unknown option:\e[33m ${@} \e[94m... try: stratum --help\e[0m"
    ;;
esac
done
